version: 2.1

commands:
  restore-yarn:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
  install-yarn:
    steps:
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
  update-kubeconfig:
    steps:
      - run:
          name: get kubeconfig for eks cluster
          command: aws eks update-kubeconfig --region us-east-1 --name rearaoke

jobs:
  build:
    docker:
      - image: cimg/node:17.3.0
    steps:
      - checkout
      - restore-yarn
      - install-yarn
      - run:
          name: Audit packages
          command: |
            yarn add improved-yarn-audit
            yarn run improved-yarn-audit --exclude GHSA-whgm-jr23-g3j9
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
  lint:
    docker:
      - image: cimg/node:17.3.0
    steps:
      - checkout
      - restore-yarn
      - install-yarn
      - run:
          name: install hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: lint dockerfile
          command: hadolint Dockerfile
      - run:
          name: lint javascript
          command: yarn lint

  test:
    docker:
      - image: cimg/node:17.3.0
    steps:
      - checkout
      - restore-yarn
      - install-yarn
      - run:
          name: run tests
          command: yarn test-once

  update-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: login to docker
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin

      - run:
          name: build docker image
          command: |
            docker build -t $DOCKER_USER/rearaoke:${CIRCLE_WORKFLOW_ID:0:7} .

      - run:
          name: deploy docker image
          command: docker push $DOCKER_USER/rearaoke:${CIRCLE_WORKFLOW_ID:0:7}

  create-eks-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install jq
          command: |
            sudo apt update
            sudo apt install jq
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: install ecktl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: create cluster if it does not exist # TODO: replace dockertag with circle workflow
          working_directory: eks
          command: |
            sed -i "s|<TAG>|${DOCKER_TAG}|" blue.yml
            sed -i "s|<TAG>|${DOCKER_TAG}|" green.yml
            sed -i "s|<TARGET>|blue|" load-balancer.yml
            (aws eks list-clusters | jq .clusters[0] | grep rearaoke) || \
            (eksctl create cluster -f eks/cluster.yml && kubectl apply -f blue.yml && kubectl apply -f green.yml && kubectl apply -f load-balancer.yml)

workflows:
  my_workflow:
    jobs:
      # - build
      # - lint:
      #     requires: [build]
      # - update-docker:
          # requires: [lint]
          # filters:
          #     branches:
          #       only:
          #         - main
      - create-eks-cluster #:
          # requires: [update-docker]
